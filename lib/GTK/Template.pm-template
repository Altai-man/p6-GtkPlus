use v6.c;

use NativeCall;

use GTK::Compat::Types;
use GTK::Raw::Pane;
use GTK::Raw::Types;

use GTK::Container;

class GTK::Pane is GTK::Container {
  has Gtk $!p;

  submethod BUILD(:$pane) {
    given $pane {
      when GtkPane | GtkWidget {
        $!p = nativecast(GtkPane, $pane);
        self.setContainer($pane);
      }
      when GTK::Pane {
      }
      default {
      }
    }
  }

  method new {
    my $pane = gtk_paned_new();
    self.bless(:$pane);
  }

  # ↓↓↓↓ SIGNALS ↓↓↓↓
  # ↑↑↑↑ SIGNALS ↑↑↑↑

  # ↓↓↓↓ ATTRIBUTES ↓↓↓↓
  # ↑↑↑↑ ATTRIBUTES ↑↑↑↑

  # ↓↓↓↓ METHODS ↓↓↓↓
  multi method gtk_paned_add1 (GtkWidget $child) {
    gtk_paned_add1($!p, $child);
  }
  multi method gtk_paned_add1 (GtkWidget $child)  {
    samewith($child);
  }

  multi method gtk_paned_add2 (GtkWidget $child) {
    gtk_paned_add2($!p, $child);
  }
  multi method gtk_paned_add2 (GtkWidget $child)  {
    samewith($child);
  }

  method gtk_paned_get_child1 () {
    gtk_paned_get_child1($!p);
  }

  method gtk_paned_get_child2 () {
    gtk_paned_get_child2($!p);
  }

  method gtk_paned_get_handle_window () {
    gtk_paned_get_handle_window($!p);
  }

  method gtk_paned_get_type () {
    gtk_paned_get_type($!p);
  }

  multi method gtk_paned_pack1 (GtkWidget $child, gboolean $resize, gboolean $shrink) {
    gtk_paned_pack1($!p, $child, $resize, $shrink);
  }
  multi method gtk_paned_pack1 (GTK::Widget $child, gboolean $resize, gboolean $shrink)  {
    samewith($child.widget, $resize, $shrink);
  }

  multi method gtk_paned_pack2 (GtkWidget $child, gboolean $resize, gboolean $shrink) {
    gtk_paned_pack2($!p, $child, $resize, $shrink);
  }
  multi method gtk_paned_pack2 (GTK::Widget $child, gboolean $resize, gboolean $shrink)  {
    samewith($child.widget, $resize, $shrink);
  }
  # ↑↑↑↑ METHODS ↑↑↑↑

}
