use v6.c;

use Cairo;
use GTK::Compat::Screen;
use GTK::Compat::Types;
use GTK::Compat::Window;
use GTK::Raw::Subs;
use GTK::Raw::Types;

use GTK::Application;
use GTK::Box;
use GTK::Button;
use GTK::Image;
use GTK::Layout;
use GTK::Offscreen;
use GTK::Scale;
use GTK::StyleContext;
use GTK::Widget;
use GTK::Window;

my $a = GTK::Application.new( title => 'org.genex.rotated-button' );

# Using layout since it is the closest non-abstract to GtkContainer
class RotatedBin is GTK::Layout {
  has GTK::Widget           $.child;
  has GTK::Compat::Window   $.offscreen_window;
  has                       $.angle;

  submethod BUILD(:$rotatedbin) {
    $!angle = 0;

    self.setType('RotatedBin');
    self.setLayout($rotatedbin);
    self.has_window = True;

    self.damage-event.tap(-> *@a {
      self.window.invalidate_rect(GdkRectangle, 0);
      @a[*-1].r = 1;
    });

    # May not be necessary, but just in case.
    self.draw.tap(-> *@a {
      @a[*-1].r = self.draw(|@a[0..1]);
    });

    self.realize-signal  .tap(-> *@a { self.do_realize   });
    self.unrealize-signal.tap(-> *@a { self.do_unrealize });
  }

  method new {
    self.bless(
      rotatedbin => cast(GtkLayout, g_object_new(GTK::Layout.get_type, Str) )
    )
  }

  method pick_offscreen_child($wx, $wy) {
    my GtkAllocation $child_area .= new;
    my Num ($x, $y);

    my $ret = GdkWindow;
    if $!child.defined && $!child.visible {
      ($x, $y) = self.to_child($wx, $wx);
      $!child.get_allocation($child_area);
      if [&&](
        $x >= 0,
        $y >= 0,
        $x < $child_area.width,
        $y < $child_area.height
      ) {
        $ret = $!offscreen_window;
      }
    }
    $ret;
  }

  method do_realize {
    my ($attribute_mask, $border_width, $window, $attributes);
    my ($allocation, $child_requisition) =
      (GtkAllocation.new, GtkRequisition.new);

    $attributes = GdkWindowAttr.new;
    self.realized = True;
    self.get_allocation($allocation);
    $border_width = self.border_width;

    my @awh = ($allocation.width, $allocation.height);
    # The C code is more declaritive, but I'm learning hyper ops. They're fun!
    ($attributes.x, $attributes.y) =
      ($allocation.x, $allocation.y) »+« ($border_width xx 2);
    ($attributes.width, $attributes.height) =
      ($allocation.width, $allocation.height) »-« ((2 * $border_width) xx 2);
    $attributes.window_type = GDK_WINDOW_CHILD;
    $attributes.event_mask = [+|](self.events, |(
      GDK_EXPOSURE_MASK,     GDK_POINTER_MOTION_MASK, GDK_BUTTON_PRESS_MASK,
      GDK_SCROLL_MASK,       GDK_BUTTON_RELEASE_MASK, GDK_ENTER_NOTIFY_MASK,
      GDK_LEAVE_NOTIFY_MASK
    ) );
    $attributes.visual = self.visual;
    $attributes.wclass = GDK_INPUT_OUTPUT;
    $attribute_mask = [+|](GDK_WA_X, GDK_WA_Y, GDK_WA_VISUAL);
    $window = GTK::Compat::Window.new(
      self.parent_window,
      $attributes,
      $attribute_mask
    );
    self.window = $window;
    $window.set_user_data(self.widget.p);

    $window.pick-embedded-child.tap(-> *@a {
      @a[*-1].r = self.pick_offscreen_child(
        $!offscreen_window,
        @a[1],
        @a[2],
        self
      );
    });

    $attributes.window_type = GDK_WINDOW_OFFSCREEN;
    $child_requisition.width = $child_requisition.height = 0;
    if $!child && self.visible {
      my GtkAllocation $child_allocation .= new;

      self.get_allocation($child_allocation);
      ($attributes.width, $attributes.height) =
        ($child_allocation.width, $child_allocation.height);
    }
    $!offscreen_window = GTK::Compat::Window.new(
      self.get_screen.root-window,
      $attributes,
      $attribute_mask
    );
    $!offscreen_window.set_user_data(self.widget.p);
    .parent_window = $window with $!child;
    $!offscreen_window.offscreen_window_embedder = $window;

    $!offscreen_window.to-embedder.tap(-> *@a {
      self.to_parent( |@a[1..4] );
    });
    $!offscreen_window.from-embedder.tap(-> *@a {
      self.to_child( |@a[1..4] )
    });

    # Makes duplicate window with nothing in it as it is OFFSCREEN!
    #$!offscreen_window.show;
  }

  method do_unrealize {
    $!offscreen_window.set_user_data(gpointer);
    $!offscreen_window.destroy;
    $!offscreen_window = GTK::Compat::Window;
    # XXX - Call unrealize on superclass
  }

  method child_type {
    $!child.defined ?? G_TYPE_NONE !! GTK::Widget.get_type;
  }

  method add (GTK::Widget $widget) {
    with $!child {
      note "RotatedBin can only have one child";
    } else {
      $widget.parent_window = $!offscreen_window;
      $widget.parent = self;
      $!child := $widget;
      # Since we can't override the internal GTK call that iterates through
      # all the widgets (as is done with GTK::Widget.show_all), we must
      # do it ourselves.
      $!child.show;
      #$!offscreen_window.show;
    }
  }

  method remove (GTK::Widget $widget) {
    my $was_visible = $widget.visible;

    if $!child =:= $widget {
      $widget.unparent;
      $!child = Nil;
      self.queue_resize if $was_visible && self.visible;
    }
  }

  method forall (Int() $include_internals, &callback, $data) {
    return without &callback;
    &callback($data);
  }

  method set_angle(Num() $angle) {
    $!angle = $angle;
    self.queue_resize;
    $!offscreen_window.geometry_changed;
  }

  method size_request (GtkRequisition $requisition) {
    my GtkRequisition $child_req .= new;
    my ($s, $c, $w, $h, $dbw);

    $child_req.width = $child_req.height = 0;
    $!child.get_preferred_size($child_req, GtkRequisition)
      if $!child.defined && $!child.visible;

    my @wh = ($child_req.width, $child_req.height);
    ($s, $c) = ($!angle.sin, $!angle.cos);
    ($w, $h) = ( [+]( ($c, $s) »*« @wh ), [+]( ($s, $c) »*« @wh ) );
    $dbw = self.border_width * 2;
    ($requisition.width, $requisition.height) = ($dbw + $w, $dbw + $h);
  }

  method get_preferred_width($min is rw, $nat is rw) {
    my GtkRequisition $req .= neq;

    self.size_request($req);
    $min = $nat = $req.width;
  }

  method get_preferred_height($min is rw, $nat is rw) {
    my GtkRequisition $req .= neq;

    self.size_request($req);
    $min = $nat = $req.height;
  }

  method size_allocate(GtkAllocation $allocation) {
    my ($border_width, $w, $h, $s, $c, $dbw);

    self.set_allocation($allocation);
    $dbw = ($border_width = self.border_width) * 2;
    ($w, $h) = ($allocation.width, $allocation.height) »-« ($dbw xx 2);
    $!offscreen_window.move_resize(
      $allocation.x + $border_width,
      $allocation.y + $border_width,
      $w,
      $h
    ) if self.realized;

    if $!child.defined && $!child.visible {
      my GtkRequisition $child_req .= new;
      my GtkAllocation $child_allo .= new;

      ($s, $c) = ($!angle.sin, $!angle.cos);
      $!child.get_preferred_size($child_req, GtkRequisition);
      $child_allo.x = $child_allo.y = 0;
      say "C: {$c} / S: {$s} / W: {$w} / H: {$h}";
      if $c =~= 0 {
        $child_allo.width = ($h / $s).Int;
      } elsif $s =~= 0 {
        $child_allo.width = ($w / $c).Int;
      } else {
        $child_allo.width = (
          $w - $s * $child_allo.height / $c,
          $h - $c * $child_allo.height / $s
        ).min.Int;
      }
      $!offscreen_window.move_resize(
        $child_allo.x,
        $child_allo.y,
        $child_allo.width,
        $child_allo.height
      ) if self.realized;
      $child_allo.x = $child_allo.y = 0;
      $!child.size_allocate($child_allo);
    }
  }

  method set_source_surface(
    Cairo::cairo_t $ccr,
    Cairo::cairo_surface_t $cs,
    Num() $x,
    Num() $y
  ) {
    my $ccs = cast(cairo_surface_t, $cs);
    my gdouble ($xx, $yy) = ($x, $y);
    $ccr.set_source_surface($ccs, $xx, $yy);
  }

  multi method draw ($, cairo_t $cairo_t) {
    my ($s, $c, $w, $h, $cr);

    if GTK::Widget.cairo_should_draw_window($cairo_t, self.window) {
      my Cairo::cairo_surface_t $surface;
      my $child_area = GtkAllocation.new;
      my $ccr = cast(Cairo::cairo_t, $cairo_t);

      $cr = Cairo::Context.new($ccr);
      if $!child.defined && $!child.visible {
        $surface = cast(
          Cairo::cairo_surface_t,
          $!offscreen_window.offscreen_window_get_surface
        );
        $!child.get_allocation($child_area);

        my @wh = ($child_area.width, $child_area.height);
        ($s, $c) = ($!angle.sin, $!angle.cos);
        ($w, $h) = ( [+]( ($c, $s) »*« @wh ), [+]( ($s, $c) »*« @wh ) );
        my @h = ($child_area.width, $child_area.height) »/« (2 xx 2);
        my ($tw, $th) = ( ($w, $h) »/« (2 xx 2) ) »+« @h;
        $cr.translate($tw, $th);
        $cr.translate(|@h);
        $cr.rotate($!angle);
        $cr.translate( |( @h »*« (-1 xx 2) ) );
        $cr.rectangle(
          0, 0,
          $!offscreen_window.width, $!offscreen_window.height
        );
        $cr.clip;
        self.set_source_surface($ccr, $surface, 0, 0);
        $cr.paint;
      }
    }

    #if GTK::Widget.cairo_should_draw_window($cairo_t, $!offscreen_window) {
      self.get_style_context.render_background(
        $cairo_t,
        0, 0,
        $!offscreen_window.width, $!offscreen_window.height
      );
      # Force the child to draw. This is usually done by
      # GTK::Container.propgate_draw, but that will not work, since we are
      # working AROUND the normak GTK inheritance method.
      $!child.draw($cairo_t);
    #}
    0;
  }

  method to-parent ($wx, $wy, $xo is rw, $yo is rw) {
    my GtkAllocation $child_area .= new;
    my ($x, $y, $xr, $yr, $c, $s, $w, $h);

    $!child.get_allocation($child_area);
    my @wh     =  ($child_area.width, $child_area.height);
    my @hwh    =  @wh »/« (2 xx 2);
    ($s, $c)   =  ($!angle.sin, $!angle.cos);
    ($w, $h)   =  ( [+]( ($c, $s) »*« @wh ), [+]( ($s, $c) »*« @wh ) );
    ($x, $y)   =  ($wx, $wy);
    ($x, $y)   =  (($x, $y) »-« ($w, $h) »/« (2 xx 2) »-« @hwh) »-« @hwh;
    ($x, $y)   =  ($x * $c + $y * $s, $y * $c - $x * $s);
    # ...or...
    #($x, $y)   =  ( [+]( |($x, $y) »*« ($c, $s) ), [-]( |($y, $x) »*« ($c, $s) );

    ($x, $y) »-=« @hwh;
    ($xo, $yo) =  ($x, $y);
  }

  method to-child ($ox, $oy, $xo is rw, $yo is rw) {
    my GtkAllocation $child_area .= new;
    my ($x, $y, $xr, $yr, $c, $s, $w, $h);

    $!child.get_allocation($child_area);
    my @wh     =  ($child_area.width, $child_area.height);
    my @hwh    =  @wh »/« (2 xx 2);
    ($s, $c)   =  ($!angle.sin, $!angle.cos);
    ($w, $h)   =  ( [+]( ($c, $s) »*« @wh ), [+]( ($s, $c) »*« @wh ) );
    ($x, $y)   =  ($ox, $oy);
    ($x, $y) »-=« @hwh;
    ($x, $y)   =  (
      [-]( |($x, $y) »*« ($c, $s) ),
      [+]( |($x, $y) »*« ($s, $c) )
    ) + @hwh;
    ($x, $y) »-=« ($w, $h) »/« (2 xx 2) »-« @hwh;
    ($xo, $yo) =  ($x, $y);
  }

}

$a.activate.tap({
  my $vbox  = GTK::Box.new-vbox;
  my $scale = GTK::Scale.new_with_range(
    GTK_ORIENTATION_HORIZONTAL,
    0, π / 2,
    0.01
  );
  my $button = GTK::Button.new_with_label('A Button');
  my $bin = RotatedBin.new;

  $bin.set_size_request(200, 200);
  $bin.add($button);

  my $a1 = GtkAllocation.new;
  $bin.size_allocate($a1);

  $bin.draw.tap(-> *@a {
    my $aloc = GtkAllocation.new;
    $bin.size_allocate($aloc);
    @a[*-1].r = $bin.draw( @a[1] );
  });

  $scale.value-changed.tap( -> *@a { $bin.set_angle($scale.value) });
  $scale.draw_value = False;

  $a.window.title = 'Rotated Button';
  $a.window.border-width = 10;
  $a.window.add($vbox);
  $vbox.pack_start($scale);
  $vbox.pack_start($bin, True, True, 0);

  $a.window.show_all;
});

$a.run;
